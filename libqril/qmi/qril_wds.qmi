package wds 0x01;

const QMI_WDS_SERVICE = 0x1;

const QMI_WDS_START_NETWORK_INTERFACE = 0x20;
const QMI_WDS_PKT_SRVC_STATUS = 0x22;
const QMI_WDS_GET_CURRENT_SETTINGS = 0x2d;
const QMI_WDS_BIND_MUX_DATA_PORT = 162;
const QMI_WDS_BIND_SUBSCRIPTION = 175;

const QMI_WDS_CONNECTION_STATUS_UNKNOWN        = 0;
const QMI_WDS_CONNECTION_STATUS_DISCONNECTED   = 1;
const QMI_WDS_CONNECTION_STATUS_CONNECTED      = 2;
const QMI_WDS_CONNECTION_STATUS_SUSPENDED      = 3;
const QMI_WDS_CONNECTION_STATUS_AUTHENTICATING = 4;


struct ep_type_iface_id {
	u32 ep_type;
	u32 iface_id;
};

struct pkt_srvc_status {
	u8 connection_status;
	u8 reconfiguration_required;
};

request start_network_interface_req {
	optional string apn_name = 0x14;
	optional u32 apn_type = 0x38;
	optional u8 ip_family_preference = 0x19;
	optional ep_type_iface_id ep_type = 0x3B;
	optional u8 bring_up_by_apn_name = 0x3C;
	optional u8 call_type = 0x35;
	optional u8 profile_index = 0x31;
} = 0x20;

struct call_end_reason_ext {
	u16 call_end_reason_type;
	u16 call_end_reason;
};

response start_network_interface_resp {
	required qmi_response_type_v01 res = 2;
	required u32 pkt_data_handle = 0x1;
	optional u16 call_end_reason = 0x10;
	optional call_end_reason_ext ext = 0x11;
} = 0x20;

# Packet Service Status
indication get_pkt_srvc_status_ind {
	required pkt_srvc_status status = 0x1;
	optional u8 ip_family = 0x12;
	optional u16 tech_name = 0x13;
	optional u8 xlat_capable = 0x15;
} = 0x22;

request get_current_settings_req {
	optional u32 requested_settings = 0x10;
} = 0x2d;

response get_current_settings_resp {
	required qmi_response_type_v01 res = 0x2;
	optional u32 ipv4_address_preference = 0x1e;
	optional u32 ipv4_gateway_addr = 0x20;
	optional u32 ipv4_subnet_mask = 0x21;
	optional u32 mtu = 41;
	optional u8 ip_family = 43;
} = 0x2d;

request bind_mux_data_port_req {
	optional ep_type_iface_id ep_id = 0x10;
	optional u8 mux_id = 0x11;
} = 162;

response bind_mux_data_port_resp {
	required qmi_response_type_v01 res = 2;
} = 162;

request bind_subscription_req {
	optional u32 subscription = 0x1;
} = 175;

response bind_subscription_resp {
	required qmi_response_type_v01 res = 2;
} = 175;
