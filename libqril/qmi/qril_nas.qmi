package nas 0x03;

const QMI_NAS_EVENT_REPORT = 0x02;
const QMI_NAS_REGISTER_INDICATIONS = 0x03;
const QMI_NAS_GET_SIGNAL_STRENGTH = 0x20;
const QMI_NAS_INITIATE_NETWORK_REGISTER = 0x22;
const QMI_NAS_SERVING_SYSTEM_REPORT = 0x24;
const QMI_NAS_SET_SYSTEM_PREFS = 0x33;
const QMI_NAS_GET_SYSTEM_PREFS = 0x34;
const QMI_NAS_GET_OPERATOR_NAME = 0x39;
const QMI_NAS_GET_CELL_LOCATION_INFO = 0x43;
const QMI_NAS_GET_PLMN_NAME = 0x44;
# https://gitlab.freedesktop.org/mobile-broadband/libqmi/-/blob/main/gobi-api/GobiAPI_2013-07-31-1347/Core/QMIEnum.h#L474
const QMI_NAS_SUBSCRIPTION_INFO_REPORT = 0x48;
const QMI_NAS_GET_SIGNAL_INFO = 0x4F;
const QMI_NAS_SIGNAL_INFO_REPORT = 0x51;
const QMI_NAS_ERROR_RATE_REPORT = 0x53;
const QMI_NAS_RF_BAND_INFO_REPORT = 0x66;
const QMI_NAS_FORCE_NETWORK_SEARCH = 0x67;
const QMI_NAS_GET_LTE_CPY_CA_INFO = 0xAC;

# get_lte_cphy_ca_info_resp.dl_bandwidth
# in MHz
enum QmiNasDlBandwidth {
	QMI_NAS_DL_BANDWIDTH_1_4      = 0;
	QMI_NAS_DL_BANDWIDTH_3        = 1;
	QMI_NAS_DL_BANDWIDTH_5        = 2;
	QMI_NAS_DL_BANDWIDTH_10       = 3;
	QMI_NAS_DL_BANDWIDTH_15       = 4;
	QMI_NAS_DL_BANDWIDTH_20       = 5;
	QMI_NAS_DL_BANDWIDTH_INVALID  = 6;
};

enum QmiNasSignalStrength {
	QMI_NAS_SIGNAL_STRENGTH_REQUEST_NONE       = 0;
	QMI_NAS_SIGNAL_STRENGTH_REQUEST_RSSI       = 1;
	QMI_NAS_SIGNAL_STRENGTH_REQUEST_ECIO       = 2;
	QMI_NAS_SIGNAL_STRENGTH_REQUEST_IO         = 4;
	QMI_NAS_SIGNAL_STRENGTH_REQUEST_SINR       = 8;
	QMI_NAS_SIGNAL_STRENGTH_REQUEST_ERROR_RATE = 16;
	QMI_NAS_SIGNAL_STRENGTH_REQUEST_RSRQ       = 32;
	QMI_NAS_SIGNAL_STRENGTH_REQUEST_LTE_SNR    = 64;
	QMI_NAS_SIGNAL_STRENGTH_REQUEST_LTE_RSRP   = 128;
};

# serving_system.registration_state
enum QmiNasRegistrationState {
	QMI_NAS_REGISTRATION_STATE_NOT_REGISTERED           = 0x00;
	QMI_NAS_REGISTRATION_STATE_REGISTERED               = 0x01;
	QMI_NAS_REGISTRATION_STATE_NOT_REGISTERED_SEARCHING = 0x02;
	QMI_NAS_REGISTRATION_STATE_REGISTRATION_DENIED      = 0x03;
	QMI_NAS_REGISTRATION_STATE_UNKNOWN                  = 0x04;
};

# serving_system.XX_attach_state
enum QmiNasAttachState {
	QMI_NAS_ATTACH_STATE_UNKNOWN  = 0x00;
	QMI_NAS_ATTACH_STATE_ATTACHED = 0x01;
	QMI_NAS_ATTACH_STATE_DETACHED = 0x02;
};

enum QmiNasRadioInterface {
	QMI_NAS_RADIO_INTERFACE_UNKNOWN     = 0xFF;
	QMI_NAS_RADIO_INTERFACE_NONE        = 0x00;
	QMI_NAS_RADIO_INTERFACE_CDMA_1X     = 0x01;
	QMI_NAS_RADIO_INTERFACE_CDMA_1XEVDO = 0x02;
	QMI_NAS_RADIO_INTERFACE_AMPS        = 0x03;
	QMI_NAS_RADIO_INTERFACE_GSM         = 0x04;
	QMI_NAS_RADIO_INTERFACE_UMTS        = 0x05;
	QMI_NAS_RADIO_INTERFACE_LTE         = 0x08;
	QMI_NAS_RADIO_INTERFACE_TD_SCDMA    = 0x09;
	QMI_NAS_RADIO_INTERFACE_5GNR        = 0x0C;
};

# The strength for the requested interface ??
struct signal_strength {
	i8 strength;
	i8 interface;
};

struct ss_value {
	u8 val;
	i8 interface;
};

struct network_reject_info {
	u8 enable_network_reject_indications;
	u8 suppress_system_info_indications;
};

# LTE Cphy CA Info
struct lte_cphy_agg_scell {
	u16 pci; # Physical cell ID
	u16 rx_chan;
	u32 dl_bandwidth;
	u16 lte_band;
	u32 state;
};

struct serving_system {
	u8 registration_state;
	u8 cs_attach_state;
	u8 ps_attach_state;
	u8 selected_network; # 1 - 3GPP2, 2 - 3GPP
	u8 *radio_interfaces(u8);
};

struct current_plmn {
	u16 mcc;
	u16 mnc;
	string description[64];
};

struct service_status {
	u8 status;
	u8 capability;
	u8 hdr_status;
	u8 hdr_hybrid;
	u8 forbidden;
};

request register_indications_req {
	required u8 system_selection_preference = 0x10;
	required u8 ddtm_events = 0x12;
	required u8 serving_system_events = 0x13;
	required u8 dual_standby_preference = 0x14;
	required u8 subscription_info = 0x15;
	required u8 network_time = 0x17;
	required u8 system_info = 0x18;
	required u8 signal_info = 0x19;
	required u8 error_rate = 0x1A;
	required u8 hdr_new_uati_assigned = 0x1B;
	required u8 hdr_session_closed = 0x1C;
	required u8 managed_roaming = 0x1D;
	required u8 current_plmn_name = 0x1E;
	required u8 embms_status = 0x1F;
	required u8 rf_band_information = 0x20;
	required network_reject_info network_reject_information = 0x21;
} = 0x03;

request get_signal_strength_req {
	required u16 mask = 0x10;
} = 0x20;

response get_signal_strength_resp {
	optional signal_strength strength = 0x01;
	required qmi_response_type_v01 res = 0x02;
	optional signal_strength strength_list(16) = 0x10;
	optional ss_value rssi_list(u16) = 0x11;
	optional ss_value ecio_list(u16) = 0x12;
	optional u32 io = 0x13;
	optional u8 sinr = 0x14;
	optional ss_value err_rate_list(16) = 0x15;
	optional ss_value rsrq = 0x16;
	optional i16 lte_snr = 0x17;
	optional i16 lte_rsrp = 0x18;
} = 0x0020;

request initiate_network_register {
	required u8 action = 0x01; # 1 -> automatic, 2 -> manual
	# Other optional TLVs for manual registration
} = 0x0022;

# FIXME: this shouldn't be duped for the response and indication...
response serving_system_resp {
	required qmi_response_type_v01 res = 0x02;
	optional serving_system system = 0x01;
	optional u8 data_service_cap(16) = 0x11; # do we have data?
	optional current_plmn plmn = 0x12;
	optional u16 lac = 0x1d;
	optional u16 cid = 0x1e;
	optional service_status status = 0x22;
} = 0x0024;

indication serving_system_ind {
	optional serving_system system = 0x01;
	optional u8 data_service_cap(16) = 0x11; # do we have data?
	optional current_plmn plmn = 0x12;
	optional u16 lac = 0x1d;
	optional u16 cid = 0x1e;
	optional service_status status = 0x22;
} = 0x0024;

request set_operating_mode_req {
	required u8 mode = 0x01;
} = 0x002E;

request set_operating_mode_resp {
	required qmi_response_type_v01 res = 0x02;
} = 0x002E;

struct service_provider_name {
	u8 display_condition;
	string name[64];
};

struct operator_plmn {
	char mcc[3];
	char mnc[3];
	u16 lac1;
	u16 lac2;
	u8 name_record_indicator;
};

struct operator_plmn_arr {
	struct {
		char mcc[3];
		char mnc[3];
		u16 lac1;
		u16 lac2;
		u8 name_record_indicator;
	} *operators(u16);
};

struct operator_plmn_name {
	u8 name_encoding;
	u8 short_country_initials;
	u8 long_name_spare_bits;
	u8 short_name_spare_bits;
	u8 *long_name(u8);
	u8 *short_name(u8);
};

struct operator_plmn_name_arr {
	struct {
		u8 name_encoding;
		u8 short_country_initials;
		u8 long_name_spare_bits;
		u8 short_name_spare_bits;
		u8 *long_name(u8);
		u8 *short_name(u8);
	} *operators(u8);
};

######### System selection preference

struct network_selection_pref {
	u8 mode; # 0 - auto, 1 - manual
	u16 mcc;
	u16 mnc;
};

request set_system_prefs {
	optional network_selection_pref network_selection = 0x16;
} = 0x0033;

response get_system_prefs {
	required qmi_response_type_v01 res = 0x02;
	optional u8 network_selection = 0x16;
} = 0x0034;

######### operator name

response get_operator_name_resp {
	required qmi_response_type_v01 res = 0x02;
	optional service_provider_name provider_name = 0x10;
	optional operator_plmn_arr operator_plmns = 0x11;
	optional operator_plmn_name_arr operator_plmn_names = 0x12;
	optional string operator_string_name = 0x13;
	optional operator_plmn_name nitz_info = 0x14;
} = 0x0039;

indication operator_name_ind {
	optional service_provider_name provider_name = 0x10;
	optional operator_plmn_arr operator_plmns = 0x11;
	optional operator_plmn_name_arr operator_plmn_names = 0x12;
	optional string operator_string_name = 0x13;
	optional operator_plmn_name nitz_info = 0x14;
} = 0x003A;

struct geran_info {
	u32 cell_id;
	u8 plmn[3];
	u16 lac;
	u16 abs_channel_num;
	u8 bsic;
	u32 timing_advance;
	u16 rx_level;
	struct {
		u32 cell_id;
		u8 plmn[3];
		u16 lac;
		u16 abs_channel_num;
		u8 bsic;
		u16 rx_level;
	} *cells(u8);
};

struct umts_info {
	u16 cell_id;
	u8 plmn[3];
	u16 lac;
	u16 abs_channel_num;
	u16 psc;
	i16 rscp;
	i16 ecio;
	struct {
		u16 abs_channel_num;
		u16 psc;
		i16 rscp;
		i16 ecio;
	} *cells(u8);
	struct {
		u16 abs_channel_num;
		u8 network_color_code;
		u8 base_station_color_code;
		i8 rssi;
	} *gerans(u8);
};

struct cdma_info {
	u16 system_id;
	u16 network_id;
	u16 bsid;
	u16 reference_pn;
	u32 latitude;
	u32 longitude;
};

struct intrafreq_lte_info {
	u8 ue_idle;
	u8 plmn[3];
	u16 tac;
	u32 global_cell_id;
	u16 abs_channel_num;
	u16 serving_cell_id;
	u8 crp;
	u8 s_non_intra_search_threshold;
	u8 serving_cell_low_threshold;
	u8 s_intra_search_threshold;
	struct {
		u16 pci;
		i16 rsrq;
		i16 rsrp;
		i16 rssi;
		i16 rx_level;
	} *cells(u8);
};

response get_cell_loc_info {
	required qmi_response_type_v01 res = 0x2;
	optional geran_info geran = 0x10;
	optional umts_info umts = 0x11;
	optional cdma_info cdma = 0x12;
	optional intrafreq_lte_info intra_lte = 0x13;
	# FIXME: add extra missing TLVs
} = 0x0043;

struct plmn_id {
	u16 mcc;
	u16 mnc;
};

struct eons_plmn_name {
	u8 sp_name_encoding; # Service Provider name encoding
	u8 *sp_name(u8);
	u8 short_name_encoding;
	u8 short_name_country_initials;
	u8 short_name_spare_bits;
	u8 *short_name(u8);
	u8 long_name_encoding;
	u8 long_name_country_initials;
	u8 long_name_spare_bits;
	u8 *long_name(u8);
};

request get_plmn_name_req {
	required plmn_id plmn = 0x01;
	# FIXME: add other optional TLVs
	optional u8 send_all_info = 0x16;
} = 0x0044;

response get_plmn_name_resp {
	required qmi_response_type_v01 res = 0x02;
	optional eons_plmn_name plmn_name = 0x10;
} = 0x0044;

struct ss_cdma {
	i8 rssi;
	i16 ecio;
};

# EVDO i think?
struct ss_hdr {
	i8 rssi;
	i16 ecio;
	u8 sinr;
	i32 io;
};

struct ss_wcdma {
	i8 rssi;
	i16 ecio;
};

struct ss_lte {
	i8 rssi;
	i8 rsrq;
	i16 rsrp;
	i16 snr;
};

struct ss_tdma_ext {
	u32 rssi;
	i32 rscp;
	i32 ecio;
	i32 sinr;
};

response get_signal_info {
	required qmi_response_type_v01 res = 0x02;
	optional ss_cdma cdma = 0x10;
	optional ss_hdr hdr_strength = 0x11;
	optional i8 gsm = 0x12;
	optional ss_wcdma wcdma = 0x13;
	optional ss_lte lte = 0x14;
	optional i8 tdma = 0x15;
	optional ss_tdma_ext tdma_ext = 0x16;
	# ignoring 5g stuff
} = 0x004F;

indication signal_info_ind {
	optional ss_cdma cdma = 0x10;
	optional ss_hdr hdr_strength = 0x11;
	optional i8 gsm = 0x12;
	optional ss_wcdma wcdma = 0x13;
	optional ss_lte lte = 0x14;
	optional i8 tdma = 0x15;
	# ignoring 5g stuff
} = 0x0051;

response get_lte_cphy_ca_info_resp {
	required qmi_response_type_v01 res = 0x02;
	optional u32 dl_bandwidth = 0x11;
	optional lte_cphy_agg_scell phy_scell_info = 0x12;
	# FIXME: add the rest of the TLVs
} = 0x00AC;
