package uim 0x0B;

const QMI_UIM_GET_CARD_STATUS = 0x2F;
const QMI_UIM_CHANGE_PROVISIONING_SESSION = 0x38;
const QMI_UIM_GET_SLOT_STATUS = 0x0047;
const QMI_UIM_SLOT_STATUS_IND = 0x0048;

const QMI_UIM_SESSION_TYPE_PRIMARY_GW_PROVISIONING = 0;

enum QmiUimCardState {
	QMI_UIM_CARD_STATE_ABSENT = 0;
	QMI_UIM_CARD_STATE_PRESENT = 1;
	QMI_UIM_CARD_STATE_ERROR = 2;
};

enum QmiUimPhysicalCardState {
	QMI_UIM_PHYSICAL_CARD_STATE_UNKNOWN = 0;
	QMI_UIM_PHYSICAL_CARD_STATE_ABSENT  = 1;
	QMI_UIM_PHYSICAL_CARD_STATE_PRESENT = 2;
};

enum QmiUimCardApplicationState {
	QMI_UIM_CARD_APPLICATION_STATE_UNKNOWN                     = 0;
	QMI_UIM_CARD_APPLICATION_STATE_DETECTED                    = 1;
	QMI_UIM_CARD_APPLICATION_STATE_PIN1_OR_UPIN_PIN_REQUIRED   = 2;
	QMI_UIM_CARD_APPLICATION_STATE_PUK1_OR_UPIN_PUK_REQUIRED   = 3;
	QMI_UIM_CARD_APPLICATION_STATE_CHECK_PERSONALIZATION_STATE = 4;
	QMI_UIM_CARD_APPLICATION_STATE_PIN1_BLOCKED                = 5;
	QMI_UIM_CARD_APPLICATION_STATE_ILLEGAL                     = 6;
	QMI_UIM_CARD_APPLICATION_STATE_READY                       = 7;
};

enum QmiUimFileType {
	QMI_UIM_FILE_TYPE_TRANSPARENT    = 0;
	QMI_UIM_FILE_TYPE_CYCLIC         = 1;
	QMI_UIM_FILE_TYPE_LINEAR_FIXED   = 2;
	QMI_UIM_FILE_TYPE_DEDICATED_FILE = 3;
	QMI_UIM_FILE_TYPE_MASTER_FILE    = 4;
};

struct card_status {
	u16 index_gw_primary;
	u16 index_1x_primary;
	u16 index_gw_secondary;
	u16 index_1x_secondary;
	struct {
		u8 card_state;
		u8 upin_state;
		u8 upin_retries;
		u8 upuk_retries;
		u8 error_code;
		struct {
			u8 type;
			u8 state;
			u8 personalization_state;
			u8 personalization_feature;
			u8 personalization_retries;
			u8 personalization_unblock_retries;
			u8 *application_identifier_value(u8)[16];
			u8 upin_replaces_pin1;
			u8 pin1_state;
			u8 pin1_retries;
			u8 puk1_retries;
			u8 pin2_state;
			u8 pin2_retries;
			u8 puk2_retries;
		} *applications(u8)[2];
	} *cards(u8)[2];
};

struct provisioning_session_change {
	u8 session_type;
	u8 activate;
};

struct provisioning_session_application {
	u8 slot;
	u8 *application_identifier_value(u8)[16];
};

struct physical_slot_state {
	u32 card_state;
	u32 slot_state;
	u8 logical_slot;
	u8 *iccid(u8);
};

struct physical_slot_info {
	struct {
		u32 card_protocol;
		u8 valid_applications;
		u8 *atr_value(u8)[32];
		u8 is_euicc;
	} *slots(u8);
};

response get_card_status_resp {
	required qmi_response_type_v01 result = 0x02;
	optional card_status status = 0x10;
} = 0x002F;

request change_provisioning_session_req {
	optional provisioning_session_change session_change = 0x01;
	optional provisioning_session_application application_information = 0x10;
} = 0x0038;

response change_provisioning_session_resp {
	required qmi_response_type_v01 result = 0x02;
} = 0x0038;

# https://gitlab.freedesktop.org/mobile-broadband/libqmi/-/blob/main/gobi-api/Gobi_2012-06-18-1054/GobiConnectionMgmt/GobiConnectionMgmtAPIStructs.h#L19609
request icc_open_logical_channel_req {
	required u8 slot = 0x1;
	optional u8 application_id(32) = 0x10; # 16 is the max length
	optional u8 fileControlInfo = 0x11;
} = 0x0042;

response icc_open_logical_channel_resp {
	required qmi_response_type_v01 result = 0x02;
	optional u8 channel_id = 0x10;
	# Actually two 8-bit values: mSW1 and mSW2
	optional u16 card_result = 0x11;
	optional u8 select_response(255) = 0x12;
} = 0x0042;

request get_slot_status_req {
} = 0x0047;

response get_slot_status_resp {
	required qmi_response_type_v01 result = 0x02;
	optional physical_slot_state slot_state(u8) = 0x10;
	optional physical_slot_info slot_info = 0x11;
	optional u8 eid_info[32] = 0x12;
} = 0x0047;

indication get_slot_status_ind {
	required physical_slot_state slot_state(u8) = 0x10;
	optional physical_slot_info slot_info = 0x11;
	optional u8 eid_info[32] = 0x12;
} = 0x0048;

struct session_t {
	u8 type; # 0 = primary GW provisioning
	u8 *aid(u8); # 16 bytes
}; # TLV 1

struct file_t {
	u16 file_id;
	u8 *path(u8);
};

struct read_info_t {
	u16 offset; # or "record number"
	u16 len;
};

request read_transparent_req {
	required session_t session = 0x01;
	required file_t file = 0x02;
	required read_info_t read_info = 0x03;
	optional u32 resp_in_ind = 0x10;
	optional u8 encrypt_data = 0x11;
} = 0x0020;

struct card_res_t {
	u8 sw1;
	u8 sw2;
};

response read_transparent_resp {
	required qmi_response_type_v01 res = 0x02;
	optional card_res_t card_res = 0x10;
	optional u8 read_result(2) = 0x11;
	optional u32 resp_in_ind = 0x12;
	optional u8 encrypted = 0x13;
} = 0x0020;

request read_record_req {
	required session_t session = 0x01;
	required file_t file = 0x02;
	required read_info_t read_info = 0x03;
	optional u16 last_record = 0x10;
	optional u32 resp_in_ind = 0x11;
} = 0x0021;

response read_record_resp {
	required qmi_response_type_v01 res = 0x02;
	optional card_res_t card_res = 0x10;
	optional u8 read_result(2) = 0x11;
	optional u8 additional_read_result(2) = 0x12;
	optional u32 resp_in_ind = 0x13;
} = 0x0021;

request get_file_attrs_req {
	required session_t session = 0x01;
	required file_t file = 0x02;
	optional u32 resp_in_ind = 0x11;
} = 0x0024;

struct file_attrs_t {
	u16 file_size;
	u16 file_id;
	u8 file_type;
	u16 record_size;
	u16 record_count;
	u8 read_sec_attr_logic;
	u16 read_sec_attrs;
	u8 write_sec_attr_logic;
	u16 write_sec_attrs;
	u8 inc_sec_attr_logic;
	u16 inc_sec_attrs;
	u8 deactivate_sec_attr_logic;
	u16 deactivate_sec_attrs;
	u8 activate_sec_attr_logic;
	u16 activate_sec_attrs;
	u8 *raw_data(u16);
};

response get_file_attrs_resp {
	required qmi_response_type_v01 res = 0x02;
	optional card_res_t card_res = 0x10;
	optional file_attrs_t file_attrs = 0x11;
	optional u32 resp_in_ind = 0x12;
} = 0x0024;

struct refresh_ev_t {
	u8 stage;
	u8 mode;
	u8 session_type;
	u8 *aid(u8)[16];
	struct {
		u16 id;
		u8 *path(u8);
	} *files(u16);
};

indication refresh {
	required refresh_ev_t event = 0x10;
} = 0x33;
